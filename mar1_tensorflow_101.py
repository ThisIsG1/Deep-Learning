# -*- coding: utf-8 -*-
"""Mar1-TensorFlow-101.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1GBgLgjqwLQgmND_CpWhbDTOipf0Pw_yC
"""

#Python Version - 3.x
#TensorFlow - 2.x

import sys;sys.version

# How to check RAM

!free -m

! nvidia-smi

! df -h | grep sda1

# If you want to install tensorflow - pip install tensorflow==2.0.0   #us e this line if on local Jupyter system

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 2.0.0     #use this line if on COlab

import tensorflow as tf

tf.__version__

tf.keras.__version__

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

from tensorflow.keras.datasets import fashion_mnist

#Input to the model is images and output is label 
# Dataset is divided in 2 parts - test & train 
(x_train, y_train),(x_test, y_test) = fashion_mnist.load_data()

type(x_train), type(y_train), type(x_test), type(y_test)

x_train.shape, y_train.shape

#Channels are R G B A

#Grayscale has only 1 channel

x_test.shape, y_test.shape

plt.imshow(x_train[3],cmap="gray")

print( y_train[3])

"""```
Label	Description
0	T-shirt/top
1	Trouser
2	Pullover
3	Dress
4	Coat
5	Sandal
6	Shirt
7	Sneaker
8	Bag
9	Ankle boot

# This is formatted as code
```
"""

x_train[3].max(),x_train[3].min()

x_train[3].shape

np.unique(y_train, return_counts=True)

#normalize dataset

x_train = x_train / 255

# [5, 10, 15]  - [0.33, 0.66, 1]  - MinMaxScaler

plt.imshow(x_train[3],cmap="gray")

x_train[3].max(),x_train[3].min()

# [I, II, III]
# We do onehot encoding for categorical values
# I   1     [1,0,0]
# II  2     [0,1,0]
# III 3     [0,0,1]

# Cat       1     [1, 0, 0, 0]
# Dog       2     [0, 1, 0, 0]
# Elephant  3     [0, 0, 1, 0]
# Horse     4     [0, 0, 0, 1]

from tensorflow.keras.utils import to_categorical

y_train

to_categorical(y_train)



y_train= to_categorical(y_train)

# 1. Loaded MNIST Dataset
# 2. normalized x train (MinMaxScaler similar to dividing by maxValue)
# 3. normalized y train (onehot encoding)

x_test = x_test / 255

y_test = to_categorical(y_test)

from tensorflow.keras.models import Sequential 
from tensorflow.keras.layers import Dense, Flatten
from tensorflow.keras.activations import relu, softmax
from tensorflow.keras.losses import categorical_crossentropy
from tensorflow.keras.optimizers import SGD

# SGD stochastic gradient desent

mod=Sequential()
mod.add(Flatten(input_shape=(28,28)))
mod.add(Dense(512,activation=relu))
mod.add(Dense(256,activation=relu))
mod.add(Dense(10,activation=softmax))

mod.summary()

mod.compile(optimizer=SGD(),loss=categorical_crossentropy,metrics=["acc"])

#Run the model
mod.fit(x_train,y_train, 1024, 20)

